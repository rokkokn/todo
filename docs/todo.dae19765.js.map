{"version":3,"sources":["src/view/html-util.ts","src/view/TodoItemView.ts","src/view/TodoListView.ts","src/model/TodoItemModel.ts","src/EventEmitter.ts","src/model/TodoListModel.ts","src/App.ts","index.ts"],"names":[],"mappings":"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","file":"todo.dae19765.js","sourceRoot":"..","sourcesContent":["export function escapeSpecialChars(str: string) {\r\n  return str\r\n    .replace(/&/g, \"&amp;\")\r\n    .replace(/</g, \"&lt;\")\r\n    .replace(/>/g, \"&gt;\")\r\n    .replace(/\"/g, \"&quot;\")\r\n    .replace(/'/g, \"&#039;\");\r\n}\r\n\r\n/**\r\n * HTML文字列からHTML要素を作成して返す\r\n * @param {string} html\r\n */\r\n\r\nexport function htmltoElement(html: string) {\r\n  const template = document.createElement(\"template\");\r\n  template.innerHTML = html;\r\n  return template.content.firstElementChild;\r\n}\r\n\r\n/**\r\n * HTML文字列からDOM Nodeを作成して返すタグ関数\r\n * @return {Element}\r\n */\r\n\r\nexport function element(\r\n  strings: TemplateStringsArray,\r\n  ...values: any[]\r\n): Element {\r\n  const htmlString = strings.reduce((result, str, i) => {\r\n    const value = values[i - 1];\r\n    if (typeof value === \"string\") {\r\n      return result + escapeSpecialChars(value) + str;\r\n    } else if (typeof value === \"object\") {\r\n      return result + htmltoElement(value) + str;\r\n    } else {\r\n      return result + String(value) + str;\r\n    }\r\n  });\r\n  return htmltoElement(htmlString);\r\n}\r\n\r\n/**\r\n * コンテナ要素の中身をbodyElementで上書きする\r\n * @param {Element} bodyElement コンテナ要素の中身となる要素\r\n * @param {Element} containerElement コンテナ要素\r\n */\r\n\r\nexport function render(bodyElement: Element, containerElement: Element) {\r\n  // containerElementの中身を空にする\r\n  containerElement.innerHTML = \"\";\r\n  // containerElementの直下にbodyElementを追加する\r\n  containerElement.appendChild(bodyElement);\r\n}\r\n","import { element } from \"./html-util\";\r\nimport { TodoItemModel } from \"../model/TodoItemModel\";\r\n\r\nexport class TodoItemView {\r\n  /**\r\n   * `todoItem`に対応するTodoアイテムのHTML要素を作成して返す\r\n   * @param {TodoItemModel} todoItem\r\n   * @param {function({id:number, completed: boolean})} onUpdateTodo チェックボックスの更新イベントリスナー\r\n   * @param {function({id:number, priority: number})} onPriorityTodo チェックボックスの更新イベントリスナー\r\n   * @param {function({id:number})} onDeleteTodo 削除ボタンのクリックイベントリスナー\r\n   * @returns {Element}\r\n   */\r\n  createElement(\r\n    todoItem: TodoItemModel,\r\n    {\r\n      onUpdateTodo,\r\n      onPriorityTodo,\r\n      onDeleteTodo,\r\n    }: {\r\n      onUpdateTodo: (arg: { id: number; completed: boolean }) => void;\r\n      onPriorityTodo: (arg: { id: number; priority: number }) => void;\r\n      onDeleteTodo: (arg: { id: number }) => void;\r\n    }\r\n  ) {\r\n    // セレクト周りのhtml\r\n    const todoItemPriorityFunction: () => element = () => {\r\n      if (todoItem.priority === 0) {\r\n        return `<select name=\"priority\" class=\"priority\"><option value=\"1\" class=\"priorityItem\" selected>1</option>\r\n            <option value=\"2\" class=\"priorityItem\" >2</option>\r\n            <option value=\"3\" class=\"priorityItem\">3</option></select>`;\r\n      } else if (todoItem.priority === 1) {\r\n        return `<select name=\"priority\" class=\"priority\"><option value=\"1\" class=\"priorityItem\" >1</option>\r\n            <option value=\"2\" class=\"priorityItem\" selected>2</option>\r\n            <option value=\"3\" class=\"priorityItem\">3</option></select>`;\r\n      } else {\r\n        return `<select name=\"priority\" class=\"priority\"><option value=\"1\" class=\"priorityItem\">1</option>\r\n              <option value=\"2\" class=\"priorityItem\">2</option>\r\n              <option value=\"3\" class=\"priorityItem\" selected>3</option></select>`;\r\n      }\r\n    };\r\n    const todoItemPriorityElement = todoItemPriorityFunction();\r\n    console.log(todoItemPriorityElement);\r\n    // 完了済みならchecked属性をつけ、未完了ならchecked属性を外す\r\n    // input要素にはcheckboxクラスをつける\r\n    const todoItemElement = todoItem.completed\r\n      ? element`<li><input type=\"checkbox\" class=\"checkbox\" checked><s>${todoItem.title}</s></input>\r\n            ${todoItemPriorityElement}\r\n           <button class=\"delete\">✕</button></li>`\r\n      : element`<li><input type=\"checkbox\" class=\"checkbox\">${todoItem.title}</input>\r\n            ${todoItemPriorityElement}\r\n            <button class=\"delete\">✕</button></li>`;\r\n\r\n    console.log(\"todoItemElement\", todoItemElement);\r\n\r\n    // チェックボックスがトグルしたときのイベントにリスナー関数を登録\r\n    const inputCheckboxElement = todoItemElement.querySelector(\".checkbox\");\r\n    inputCheckboxElement.addEventListener(\"change\", () => {\r\n      // 指定したTodoアイテムの完了状態を反転させる\r\n      onUpdateTodo({\r\n        id: todoItem.id,\r\n        completed: !todoItem.completed,\r\n      });\r\n    });\r\n\r\n    // セレクトボックスを変更したときのイベントにリスナー関数を登録\r\n    const inputPriorityElement: HTMLSelectElement = todoItemElement.querySelector(\r\n      \".priority\"\r\n    );\r\n    const inputPriorityElements = inputPriorityElement.options;\r\n\r\n    inputPriorityElement.addEventListener(\"change\", (event: any) => {\r\n      // const val = event.target.value;\r\n      const selectedIndex = inputPriorityElement.selectedIndex;\r\n\r\n      onPriorityTodo({\r\n        id: todoItem.id,\r\n        priority: selectedIndex,\r\n      });\r\n      inputPriorityElements[todoItem.priority].selected = true;\r\n      // inputPriorityElement.selectedIndex = todoItem.priority;\r\n\r\n      // console.log(\r\n      //   \"selectedIndex\",\r\n      //   selectedIndex,\r\n      //   \"todoItem.priority\",\r\n      //   todoItem.priority,\r\n      //   \"inputPriorityElements[todoItem.priority]\",\r\n      //   inputPriorityElements[todoItem.priority]\r\n      // );\r\n    });\r\n\r\n    // 削除ボタン(x)がクリックされたときにTodoListModelからアイテムを削除する\r\n    const deleteButtonElement = todoItemElement.querySelector(\".delete\");\r\n    deleteButtonElement.addEventListener(\"click\", () => {\r\n      onDeleteTodo({\r\n        id: todoItem.id,\r\n      });\r\n    });\r\n    // 作成したTodoアイテムのHTML要素を返す\r\n    return todoItemElement;\r\n  }\r\n}\r\n","import { element } from \"./html-util\";\r\nimport { TodoItemView } from \"./TodoItemView\";\r\nimport { TodoItemModel } from \"../model/TodoItemModel\";\r\n\r\nexport class TodoListView {\r\n  /**\r\n   * `todoItems`に対応するTodoリストのHTML要素を作成して返す\r\n   * @param {TodoItemModel[]} todoItems TodoItemModelの配列\r\n   * @param {function({id:number, completed: boolean})} onUpdateTodo チェックボックスの更新イベントリスナー\r\n   * @param {function({id:number, priority: number})} onPriorityTodo 優先順位の更新イベントリスナー\r\n   * @param {function({id:number})} onDeleteTodo 削除ボタンのクリックイベントリスナー\r\n   * @returns {Element} TodoItemModelの配列に対応したリストのHTML要素\r\n   */\r\n\r\n  createElement(\r\n    todoItems: TodoItemModel[],\r\n    {\r\n      onUpdateTodo,\r\n      onPriorityTodo,\r\n      onDeleteTodo,\r\n    }: {\r\n      onUpdateTodo: ({\r\n        id,\r\n        completed,\r\n      }: {\r\n        id: number;\r\n        completed: boolean;\r\n      }) => void;\r\n\r\n      onPriorityTodo: ({\r\n        id,\r\n        priority,\r\n      }: {\r\n        id: number;\r\n        priority: number;\r\n      }) => void;\r\n\r\n      onDeleteTodo: ({ id }: { id: number }) => void;\r\n    }\r\n  ): Element {\r\n    const todoListElement = element`<ul />`;\r\n    // 各TodoItemモデルに対応したHTML要素を作成し、リスト要素へ追加す\r\n    todoItems.forEach((todoItem) => {\r\n      const todoItemView = new TodoItemView();\r\n      const todoItemElement = todoItemView.createElement(todoItem, {\r\n        onDeleteTodo,\r\n        onPriorityTodo,\r\n        onUpdateTodo,\r\n      });\r\n      todoListElement.appendChild(todoItemElement);\r\n    });\r\n    return todoListElement;\r\n  }\r\n}\r\n","// ユニークなIDを管理する変数\r\nlet todoIdx = 0;\r\nexport class TodoItemModel {\r\n  /**\r\n   * TodoアイテムのID\r\n   */\r\n  id: number;\r\n  /**\r\n   * Todoアイテムのタイトル\r\n   */\r\n  title: string;\r\n  /**\r\n   * Todoアイテムが完了済みならばtrue、そうでない場合はfalse\r\n   */\r\n  completed: boolean;\r\n  /**\r\n   * Todoアイテムの優先度のindexを取得\r\n   */\r\n  priority: number;\r\n\r\n  /**\r\n   * 優先度が選択されていたらtrue、そうでない場合はfalse\r\n   */\r\n  // selected: boolean;\r\n\r\n  /**\r\n   * @param title Todoアイテムのタイトル\r\n   * @param completed Todoアイテムが完了済みならばtrue、そうでない場合はfalse\r\n   */\r\n  constructor({\r\n    title,\r\n    completed,\r\n    priority,\r\n  }: {\r\n    title: string;\r\n    completed: boolean;\r\n    priority: number;\r\n  }) {\r\n    // idは自動的に連番となりそれぞれのインスタンスごとに異なるものとする\r\n    this.id = todoIdx++;\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.priority = priority;\r\n  }\r\n}\r\n","export class EventEmitter {\r\n  _listeners: Map<string, Set<() => void>>;\r\n  constructor() {\r\n    // 登録する [イベント名, Set(リスナー関数)] を管理するMap\r\n    this._listeners = new Map();\r\n  }\r\n  /**\r\n   * 指定したイベントが実行されたときに呼び出されるリスナー関数を登録する\r\n   * @param {string} type イベント名\r\n   * @param {Function} listener イベントリスナー\r\n   */\r\n  addEventListener(type: string, listener: () => void) {\r\n    // 指定したイベントに対応するSetを作成しリスナー関数を登録する\r\n    if (!this._listeners.has(type)) {\r\n      this._listeners.set(type, new Set());\r\n    }\r\n    const listenerSet = this._listeners.get(type);\r\n    listenerSet.add(listener);\r\n  }\r\n  /**\r\n   * 指定したイベントをディスパッチする\r\n   * @param {string} type イベント名\r\n   */\r\n  emit(type: string) {\r\n    // 指定したイベントに対応するSetを取り出し、すべてのリスナー関数を呼び出す\r\n    const listenerSet = this._listeners.get(type);\r\n    if (!listenerSet) {\r\n      return;\r\n    }\r\n    listenerSet.forEach(listener => {\r\n      listener.call(this);\r\n      console.log(\"listenerSet_this\", this);\r\n    });\r\n  }\r\n  /**\r\n   * 指定したイベントのイベントリスナーを解除する\r\n   * @param {string} type イベント名\r\n   * @param {Function} listener イベントリスナー\r\n   */\r\n  removeEventListener(type: string, listener: () => void) {\r\n    // 指定したイベントに対応するSetを取り出し、該当するリスナー関数を削除する\r\n    const listenerSet = this._listeners.get(type);\r\n    if (!listenerSet) {\r\n      return;\r\n    }\r\n    listenerSet.forEach(ownListener => {\r\n      if (ownListener === listener) {\r\n        listenerSet.delete(listener);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { EventEmitter } from \"../EventEmitter\";\r\nimport { TodoItemModel } from \"./TodoItemModel\";\r\nexport class TodoListModel extends EventEmitter {\r\n  items: TodoItemModel[];\r\n  /**\r\n   * @param {TodoItemModel[]} [items] 初期アイテム一覧（デフォルトは空の配列）\r\n   */\r\n\r\n  constructor(items: TodoItemModel[] = []) {\r\n    super();\r\n    this.items = items;\r\n  }\r\n  /**\r\n   * TodoItemの合計個数を返す\r\n   * @returns {number}\r\n   */\r\n  getTotalCount() {\r\n    return this.items.length;\r\n  }\r\n  /**\r\n   * 表示できるTodoItemの配列を返す\r\n   * @returns {TodoItemModel[]}\r\n   */\r\n  getTodoItems() {\r\n    return this.items;\r\n  }\r\n  /**\r\n   * TodoListの状態が更新されたときに呼び出されるリスナー関数を登録する\r\n   * @param {Function} listener\r\n   */\r\n  onChange(listener: () => void) {\r\n    this.addEventListener(\"change\", listener);\r\n  }\r\n  /**\r\n   * 状態が変更されたときに呼ぶ。登録済みのリスナー関数を呼び出す\r\n   */\r\n  emitChange() {\r\n    this.emit(\"change\");\r\n  }\r\n\r\n  /**\r\n   * TodoItemを追加する\r\n   * @param {TodoItemModel} todoItem\r\n   */\r\n\r\n  addTodo(todoItem: TodoItemModel) {\r\n    if (todoItem.title !== \"\") {\r\n      this.items.push(todoItem);\r\n      this.emitChange();\r\n    }\r\n  }\r\n  /**\r\n   * 指定したidのTodoItemのcompletedを更新する\r\n   */\r\n  updateTodo({ id, completed }: { id: number; completed: boolean }) {\r\n    // `id`が一致するTodoItemを見つけ、あるなら完了状態の値を更新する\r\n    const todoItem = this.items.find((todo) => todo.id === id);\r\n    if (!todoItem) {\r\n      return;\r\n    }\r\n    todoItem.completed = completed;\r\n    this.emitChange();\r\n  }\r\n  /**\r\n   * 指定したidのTodoItemのpriorityを更新する\r\n   */\r\n  priorityTodo({ id, priority }: { id: number; priority: number }) {\r\n    const todoItem = this.items.find((todo) => todo.id === id);\r\n    if (!todoItem) {\r\n      return;\r\n    }\r\n    todoItem.priority = priority;\r\n    this.emitChange();\r\n  }\r\n\r\n  /**\r\n   * 指定したidのTodoItemを削除する\r\n   * @param {{ id: number }}\r\n   */\r\n  deleteTodo({ id }: { id: number }) {\r\n    // `id`に一致しないTodoItemだけを残すことで、`id`に一致するTodoItemを削除する\r\n    this.items = this.items.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    this.emitChange();\r\n  }\r\n}\r\n","import { render } from \"./view/html-util\";\r\nimport { TodoListView } from \"./view/TodoListView\";\r\nimport { TodoItemModel } from \"./model/TodoItemModel\";\r\nimport { TodoListModel } from \"./model/TodoListModel\";\r\n\r\nexport class App {\r\n  todoListView: TodoListView;\r\n  todoListModel: TodoListModel;\r\n  constructor() {\r\n    // 1. TodoListの初期化\r\n    this.todoListView = new TodoListView();\r\n    this.todoListModel = new TodoListModel([]);\r\n  }\r\n\r\n  /**\r\n   * Todoを追加するときに呼ばれるリスナー関数\r\n   * @param {string} title\r\n   */\r\n\r\n  handleAdd(title: string) {\r\n    this.todoListModel.addTodo(\r\n      new TodoItemModel({ title, completed: false, priority: 0 })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Todoの状態を更新したときに呼ばれるリスナー関数\r\n   * @param {{ id:number, completed: boolean }}\r\n   */\r\n\r\n  handleUpdate({ id, completed }: { id: number; completed: boolean }) {\r\n    this.todoListModel.updateTodo({ id, completed });\r\n  }\r\n\r\n  /**\r\n   * 優先順位を更新したときに呼ばれるリスナー関数\r\n   * @param {{ id:number, priority:number }}\r\n   */\r\n  handlePriority({ id, priority }: { id: number; priority: number }) {\r\n    this.todoListModel.priorityTodo({ id, priority });\r\n  }\r\n\r\n  /**\r\n   * Todoを削除したときに呼ばれるリスナー関数\r\n   * @param {{ id: number }}\r\n   */\r\n  handleDelete({ id }: { id: number }) {\r\n    this.todoListModel.deleteTodo({ id });\r\n  }\r\n\r\n  mount() {\r\n    const formElement = document.querySelector(\".js-form\");\r\n    const inputElement = document.querySelector(\r\n      \".js-form-input\"\r\n    ) as HTMLInputElement;\r\n    const containerElement = document.querySelector(\".js-todo-list\");\r\n    const todoItemCountElement = document.querySelector(\".js-todo-count\");\r\n\r\n    // 2. TodoListModelの状態が更新されたら表示を更新する\r\n    this.todoListModel.onChange(() => {\r\n      // それぞれのTodoItem要素をtodoListElement以下へ追加する\r\n      const todoItems = this.todoListModel.getTodoItems();\r\n      const todoListElement = this.todoListView.createElement(todoItems, {\r\n        onUpdateTodo: ({ id, completed }) => {\r\n          this.handleUpdate({ id, completed });\r\n        },\r\n        onPriorityTodo: ({ id, priority }) => {\r\n          this.handlePriority({ id, priority });\r\n        },\r\n        // Todoアイテムが削除イベントを発生したときに呼ばれるリスナー関数\r\n        onDeleteTodo: ({ id }) => {\r\n          this.handleDelete({ id });\r\n        },\r\n      });\r\n\r\n      // containerElementの中身をtodoListElementで上書きする\r\n      render(todoListElement, containerElement);\r\n      // アイテム数の表示を更新\r\n      todoItemCountElement.textContent = `Todoアイテム数：${this.todoListModel.getTotalCount()}`;\r\n    });\r\n    // 3. フォームを送信したら、新しいTodoItemModelを追加する\r\n    formElement.addEventListener(\"submit\", (event) => {\r\n      // submitイベント本来の動きを止める\r\n      event.preventDefault();\r\n      // 新しいTodoItemをTodoListへ追加する\r\n      this.handleAdd(inputElement.value);\r\n      // 入力欄を空文字列にしてリセットする\r\n      inputElement.value = \"\";\r\n    });\r\n  }\r\n}\r\n","import { App } from \"./src/App\";\r\nconst app = new App();\r\napp.mount();\r\n"]}